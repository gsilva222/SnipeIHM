import { Injectable } from '@angular/core';
import { Capacitor } from '@capacitor/core';
import {
  LocalNotifications,
  Schedule,
  ActionPerformed,
  LocalNotificationSchema,
  PermissionStatus,
} from '@capacitor/local-notifications';
import { MovieReminder, NotificationSettings } from '../models/reminder.model';

@Injectable({
  providedIn: 'root',
})
export class NotificationService {
  private readonly STORAGE_KEY = 'notification_settings';
  private readonly REMINDERS_KEY = 'movie_reminders';

  private defaultSettings: NotificationSettings = {
    enabled: true,
    sound: true,
    vibration: true,
    reminderMinutesBefore: 0,
  };

  constructor() {
    this.initializeNotifications();
  }

  /**
   * Inicializa o servi√ßo de notifica√ß√µes
   */
  private async initializeNotifications(): Promise<void> {
    if (Capacitor.isNativePlatform()) {
      // Pedir permiss√µes
      await this.requestPermissions();

      // Configurar listeners para a√ß√µes de notifica√ß√£o
      await LocalNotifications.addListener(
        'localNotificationActionPerformed',
        (notification: ActionPerformed) => {
          console.log('Notifica√ß√£o acionada:', notification);
        }
      );
    } else {
      console.log(
        'üåê Modo desenvolvimento - Notifica√ß√µes simuladas no browser'
      );
    }
  }

  /**
   * Verifica se est√° rodando no browser (modo desenvolvimento)
   */
  private isWebPlatform(): boolean {
    return !Capacitor.isNativePlatform();
  }

  /**
   * Solicita permiss√µes para notifica√ß√µes
   */
  async requestPermissions(): Promise<PermissionStatus> {
    const permissions = await LocalNotifications.requestPermissions();
    console.log('Permiss√µes de notifica√ß√£o:', permissions);
    return permissions;
  }

  /**
   * Verifica se as notifica√ß√µes est√£o habilitadas
   */
  async checkPermissions(): Promise<PermissionStatus> {
    if (this.isWebPlatform()) {
      // Simular permiss√µes no browser
      console.log('üåê Simulando permiss√µes no browser - sempre permitidas');
      return { display: 'granted' };
    }
    return await LocalNotifications.checkPermissions();
  }

  /**
   * Verifica permiss√µes de forma mais robusta para dispositivos m√≥veis
   */
  async ensurePermissions(): Promise<boolean> {
    try {
      console.log('üîµ Verificando permiss√µes de notifica√ß√£o...');
      
      if (this.isWebPlatform()) {
        console.log('üåê Web platform - permiss√µes simuladas');
        return true;
      }

      // Primeiro verificar se j√° temos permiss√µes
      const currentPermissions = await LocalNotifications.checkPermissions();
      console.log('üîµ Permiss√µes atuais:', currentPermissions);

      if (currentPermissions.display === 'granted') {
        console.log('‚úÖ Permiss√µes j√° concedidas');
        return true;
      }

      // Se n√£o temos permiss√µes, tentar solicitar
      console.log('üîµ Solicitando permiss√µes...');
      const requestedPermissions = await LocalNotifications.requestPermissions();
      console.log('üîµ Resultado da solicita√ß√£o:', requestedPermissions);

      const hasPermissions = requestedPermissions.display === 'granted';
      console.log(hasPermissions ? '‚úÖ Permiss√µes concedidas' : '‚ùå Permiss√µes negadas');
      
      return hasPermissions;
    } catch (error) {
      console.error('‚ùå Erro ao verificar/solicitar permiss√µes:', error);
      return false;
    }
  }

  /**
   * Agenda uma notifica√ß√£o para um lembrete de filme
   */
  async scheduleMovieReminder(reminder: MovieReminder): Promise<number> {
    try {
      console.log('üîµ Iniciando agendamento de notifica√ß√£o:', {
        movieTitle: reminder.movieTitle,
        reminderDate: reminder.reminderDate,
        reminderTime: reminder.reminderTime,
        platform: Capacitor.getPlatform()
      });

      const settings = await this.getNotificationSettings();
      console.log('üîµ Configura√ß√µes carregadas:', settings);

      if (!settings.enabled) {
        throw new Error('As notifica√ß√µes est√£o desabilitadas. Ative as notifica√ß√µes nas configura√ß√µes para criar lembretes.');
      }

      // Verificar permiss√µes primeiro de forma robusta
      const hasPermissions = await this.ensurePermissions();
      if (!hasPermissions) {
        throw new Error('Permiss√µes de notifica√ß√£o n√£o concedidas. Ative as notifica√ß√µes nas configura√ß√µes do dispositivo.');
      }

      // Calcular o timestamp da notifica√ß√£o
      const reminderDateTime = new Date(reminder.reminderDate);
      const [hours, minutes] = reminder.reminderTime.split(':').map(Number);
      reminderDateTime.setHours(hours, minutes, 0, 0);
      console.log('üîµ Data/hora calculada:', reminderDateTime.toISOString());

      // A notifica√ß√£o ser√° enviada no hor√°rio exato escolhido pelo usu√°rio
      const notificationTime = reminderDateTime;

      // Verificar se a data n√£o √© no passado (com margem de seguran√ßa m√≠nima)
      const currentTime = new Date();
      const minimumTime = new Date(currentTime.getTime() + 30 * 1000); // 30 segundos no futuro

      if (reminderDateTime.getTime() <= minimumTime.getTime()) {
        const now = new Date();
        const timeNow = now.toLocaleTimeString('pt-PT', { hour: '2-digit', minute: '2-digit' });
        const dateNow = now.toLocaleDateString('pt-PT');
        const selectedTime = reminderDateTime.toLocaleTimeString('pt-PT', { hour: '2-digit', minute: '2-digit' });
        const selectedDate = reminderDateTime.toLocaleDateString('pt-PT');
        
        if (selectedDate === dateNow) {
          throw new Error(`O hor√°rio selecionado (${selectedTime}) j√° passou. Agora s√£o ${timeNow}. Escolha um hor√°rio futuro ou uma data posterior.`);
        } else {
          throw new Error(`A data e hor√°rio selecionados (${selectedDate} √†s ${selectedTime}) j√° passaram. Escolha uma data e hor√°rio futuros.`);
        }
      }

      // Gerar um ID compat√≠vel com Android (32-bit integer)
      const notificationId = Math.floor(Math.random() * 2147483647); // Max 32-bit signed integer
      console.log('üîµ ID da notifica√ß√£o gerado:', notificationId);

      const notification: LocalNotificationSchema = {
        id: notificationId,
        title: 'üé¨ Lembrete de Filme',
        body: `${
          reminder.message || `N√£o esque√ßa de assistir "${reminder.movieTitle}"`
        }`,
        schedule: {
          at: notificationTime,
        },
        sound: settings.sound ? 'beep.wav' : undefined,
        // Remover attachments para testar se est√° a causar problemas
        // attachments: reminder.moviePoster
        //   ? [
        //       {
        //         id: 'poster',
        //         url: reminder.moviePoster,
        //         options: {
        //           iosUNNotificationAttachmentOptionsTypeHintKey: 'public.jpeg',
        //         },
        //       },
        //     ]
        //   : undefined,
        actionTypeId: 'MOVIE_REMINDER',
        extra: {
          reminderId: reminder.id,
          movieTitle: reminder.movieTitle,
        },
      };

      console.log('üîµ Notifica√ß√£o preparada:', {
        id: notification.id,
        title: notification.title,
        scheduleTime: notificationTime.toISOString(),
        platform: Capacitor.getPlatform()
      });

      // Verificar se est√° no browser (modo desenvolvimento)
      if (this.isWebPlatform()) {
        console.log('üåê SIMULA√á√ÉO NO BROWSER üåê');
        console.log('üìÖ Lembrete que seria agendado:');
        console.log(`üé¨ Filme: ${reminder.movieTitle}`);
        console.log(`‚è∞ Data/Hora: ${reminderDateTime.toLocaleString()}`);
        console.log(`üîî Notifica√ß√£o em: ${notificationTime.toLocaleString()}`);
        console.log(
          `üí¨ Mensagem: ${
            reminder.message ||
            `N√£o esque√ßa de assistir "${reminder.movieTitle}"`
          }`
        );

        // Simular ID de notifica√ß√£o
        return Date.now();
      }

      // Tentar agendar a notifica√ß√£o
      console.log('üîµ Agendando notifica√ß√£o no dispositivo...');
      await LocalNotifications.schedule({
        notifications: [notification],
      });

      console.log('‚úÖ Notifica√ß√£o agendada com sucesso para:', notificationTime.toLocaleString());
      return notificationId;
    } catch (error) {
      console.error('‚ùå Erro detalhado ao agendar notifica√ß√£o:', {
        error: error,
        message: error instanceof Error ? error.message : 'Erro desconhecido',
        stack: error instanceof Error ? error.stack : null,
        platform: Capacitor.getPlatform(),
        reminder: {
          movieTitle: reminder.movieTitle,
          reminderDate: reminder.reminderDate,
          reminderTime: reminder.reminderTime
        }
      });
      
      // Relan√ßar o erro com mais informa√ß√µes
      if (error instanceof Error) {
        // Verificar se √© erro espec√≠fico do Android sobre ID de notifica√ß√£o
        if (error.message.includes('identifier should be a Java int')) {
          throw new Error('Erro interno do sistema Android. Tente novamente ou reinicie o aplicativo.');
        }
        throw error;
      } else {
        throw new Error(`Erro inesperado ao agendar notifica√ß√£o: ${JSON.stringify(error)}`);
      }
    }
  }

  /**
   * Cancela uma notifica√ß√£o espec√≠fica
   */
  async cancelNotification(notificationId: number): Promise<void> {
    try {
      await LocalNotifications.cancel({
        notifications: [{ id: notificationId }],
      });
      console.log(`Notifica√ß√£o ${notificationId} cancelada`);
    } catch (error) {
      console.error('Erro ao cancelar notifica√ß√£o:', error);
      throw error;
    }
  }

  /**
   * Lista todas as notifica√ß√µes pendentes
   */
  async getPendingNotifications() {
    try {
      const result = await LocalNotifications.getPending();
      return result.notifications;
    } catch (error) {
      console.error('Erro ao buscar notifica√ß√µes pendentes:', error);
      return [];
    }
  }

  /**
   * Cancela todas as notifica√ß√µes
   */
  async cancelAllNotifications(): Promise<void> {
    try {
      const pending = await this.getPendingNotifications();
      if (pending.length > 0) {
        await LocalNotifications.cancel({
          notifications: pending.map((n) => ({ id: n.id })),
        });
      }
      console.log('Todas as notifica√ß√µes foram canceladas');
    } catch (error) {
      console.error('Erro ao cancelar todas as notifica√ß√µes:', error);
      throw error;
    }
  }

  /**
   * Obt√©m as configura√ß√µes de notifica√ß√£o do usu√°rio
   */
  async getNotificationSettings(): Promise<NotificationSettings> {
    try {
      const stored = localStorage.getItem(this.STORAGE_KEY);
      if (stored) {
        return { ...this.defaultSettings, ...JSON.parse(stored) };
      }
      return this.defaultSettings;
    } catch (error) {
      console.error('Erro ao carregar configura√ß√µes:', error);
      return this.defaultSettings;
    }
  }

  /**
   * Salva as configura√ß√µes de notifica√ß√£o
   */
  async saveNotificationSettings(
    settings: NotificationSettings
  ): Promise<void> {
    try {
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(settings));
      console.log('Configura√ß√µes de notifica√ß√£o salvas:', settings);
    } catch (error) {
      console.error('Erro ao salvar configura√ß√µes:', error);
      throw error;
    }
  }

  /**
   * Testa uma notifica√ß√£o imediata
   */
  async testNotification(): Promise<void> {
    try {
      const testNotification: LocalNotificationSchema = {
        id: Math.floor(Math.random() * 2147483647), // ID compat√≠vel com Android
        title: 'üé¨ Teste - Snipe',
        body: 'Esta √© uma notifica√ß√£o de teste!',
        schedule: {
          at: new Date(Date.now() + 3000), // 3 segundos no futuro
        },
        sound: 'beep.wav',
      };

      await LocalNotifications.schedule({
        notifications: [testNotification],
      });

      console.log('Notifica√ß√£o de teste agendada');
    } catch (error) {
      console.error('Erro ao testar notifica√ß√£o:', error);
      throw error;
    }
  }
}
